#!/bin/bash

# Script de build optimis√© pour Netlify
echo "üöÄ D√©marrage du build..."

# V√©rification de la version Node.js
echo "üìã Version Node.js: $(node --version)"
echo "üìã Version npm: $(npm --version)"

# Nettoyage des caches
echo "üßπ Nettoyage des caches..."
npm cache clean --force

# Suppression des modules existants
echo "üóëÔ∏è Suppression des node_modules..."
rm -rf node_modules

# Suppression du package-lock.json pour une installation propre
echo "üóëÔ∏è Suppression du package-lock.json..."
rm -f package-lock.json

# Installation des d√©pendances avec gestion d'erreurs
echo "üì¶ Installation des d√©pendances..."
if npm install --legacy-peer-deps --no-optional --production=false; then
    echo "‚úÖ D√©pendances install√©es avec succ√®s"
else
    echo "‚ùå Erreur lors de l'installation des d√©pendances"
    echo "üîß Tentative d'installation avec --force..."
    if npm install --legacy-peer-deps --force; then
        echo "‚úÖ D√©pendances install√©es avec --force"
    else
        echo "‚ùå √âchec de l'installation des d√©pendances"
        exit 1
    fi
fi

# V√©rification des d√©pendances
echo "üîç V√©rification des d√©pendances..."
npm ls --depth=0 || echo "‚ö†Ô∏è Certaines d√©pendances peuvent avoir des avertissements"

# V√©rification des d√©pendances critiques
echo "üîç V√©rification des d√©pendances critiques..."
CRITICAL_DEPS=("react" "react-dom" "vite")
for dep in "${CRITICAL_DEPS[@]}"; do
    if npm ls "$dep" >/dev/null 2>&1; then
        echo "‚úÖ $dep install√©"
    else
        echo "‚ùå $dep manquant - tentative d'installation..."
        npm install "$dep" --legacy-peer-deps
    fi
done

# Build du projet
echo "üî® Build du projet..."
if npm run build; then
    echo "‚úÖ Build r√©ussi !"
else
    echo "‚ùå Build √©chou√© - tentative de build avec Vite directement..."
    if npx vite build; then
        echo "‚úÖ Build Vite direct r√©ussi !"
    else
        echo "‚ùå √âchec du build Vite direct"
        exit 1
    fi
fi

# V√©rification du build
if [ -d "dist" ]; then
    echo "‚úÖ Build r√©ussi !"
    echo "üìÅ Contenu du dossier dist:"
    ls -la dist/
    
    # V√©rification des fichiers critiques
    if [ -f "dist/index.html" ]; then
        echo "‚úÖ index.html g√©n√©r√©"
    else
        echo "‚ùå index.html manquant"
        exit 1
    fi
    
    if [ -d "dist/assets" ]; then
        echo "‚úÖ Dossier assets g√©n√©r√©"
        echo "üìÅ Contenu des assets:"
        ls -la dist/assets/
    else
        echo "‚ùå Dossier assets manquant"
        exit 1
    fi
else
    echo "‚ùå Build √©chou√© !"
    exit 1
fi

echo "üéâ Build termin√© avec succ√®s !"
echo "üìä R√©sum√© du build:"
echo "   - Node.js: $(node --version)"
echo "   - npm: $(npm --version)"
echo "   - Dossier dist: $(du -sh dist 2>/dev/null || echo 'N/A')"
echo "   - Fichiers g√©n√©r√©s: $(find dist -type f | wc -l)"
